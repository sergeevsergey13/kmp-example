// Generated by Touchlab SKIE 0.8.2

import Foundation

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftFlow<T>) -> Shared.SkieKotlinFlow<T> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinFlow<T> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinFlow<T> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinFlow<T> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinFlow<T> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinFlow(flow.delegate)
}

extension Shared.SkieSwiftFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalFlow(flow.delegate)
}

extension Shared.SkieSwiftOptionalFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinSharedFlow<T> {
    return Shared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinSharedFlow<T> {
    return Shared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinSharedFlow<T> {
    return Shared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinSharedFlow<T> {
    return Shared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinSharedFlow(flow.delegate)
}

extension Shared.SkieSwiftSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

extension Shared.SkieSwiftOptionalSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinMutableSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinMutableSharedFlow<T> {
    return Shared.SkieKotlinMutableSharedFlow(flow.delegate)
}

public func SkieKotlinMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinMutableSharedFlow(flow.delegate)
}

extension Shared.SkieSwiftMutableSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalMutableSharedFlow<T> {
    return Shared.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalMutableSharedFlow<T> {
    return Shared.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) -> Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

extension Shared.SkieSwiftOptionalMutableSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinStateFlow<T> {
    return Shared.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinStateFlow<T> {
    return Shared.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinStateFlow(flow.delegate)
}

extension Shared.SkieSwiftStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T> {
    return Shared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T> {
    return Shared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T> {
    return Shared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T> {
    return Shared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalStateFlow(flow.delegate)
}

extension Shared.SkieSwiftOptionalStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinMutableStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinMutableStateFlow<T> {
    return Shared.SkieKotlinMutableStateFlow(flow.delegate)
}

public func SkieKotlinMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinMutableStateFlow(flow.delegate)
}

extension Shared.SkieSwiftMutableStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalMutableStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalMutableStateFlow<T> {
    return Shared.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift.AnyObject>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalMutableStateFlow<T> {
    return Shared.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftMutableStateFlow<T>) -> Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) -> Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> {
    return Shared.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

extension Shared.SkieSwiftOptionalMutableStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension Shared.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: Shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: Shared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}
