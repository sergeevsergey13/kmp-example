// Generated by Touchlab SKIE 0.8.2

import Foundation
import _Concurrency

public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {

    private let iterator: Shared.SkieColdFlowIterator<Swift.AnyObject>

    init(flow: Shared.Kotlinx_coroutines_coreFlow) {
        iterator = .init(flow: flow)
    }

    @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
    public func next() async -> T? {
        do {
            let hasNext = try await skie(iterator).hasNext()

            if hasNext.boolValue {
                return .some(iterator.next() as! Element)
            } else {
                return nil
            }
        } catch is _Concurrency.CancellationError {
            await cancelTask()

            return nil
        } catch {
            Swift.fatalError("Unexpected error: \(error)")
        }
    }

    @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
    private func cancelTask() async -> Swift.Void {
        _Concurrency.withUnsafeCurrentTask { task in
            task?.cancel()
        }
    }

    deinit {
        iterator.cancel()
    }

    public typealias Element = T

}
